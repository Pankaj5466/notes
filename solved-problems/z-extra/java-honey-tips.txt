/*
#1 convert arraylist to array
int arr[] = new list1.stream().mapToInt(x->x).toArray();

#2 there is no .at(idx) in java, instead we have .get()

#3 Accessing set or HashSet using iterator
for(int x:set1)

for(Iterator<Integer> it = set1.iterator(); it.hashNext();)
{
    int num = it.next(); //return the elemetn & forware the iterator.
}

#4 sorting
int arr[] = new int[10];
Arrays.sort(arr);
Can't sort int[] in descending order in Java;

ArrayList<Integer> arr2 = new ArrayList<>();
Collections.sort(arr2);
Collections.sort(arr2,(a,b)->b-a);


#5 Java HashSet does not accept comperator. If you want set with custom ordering use TreeSetin

#5 Working with String
- we does not have a in-built function to get string of fixed size via String|StringBuffer|StringBuilder
- If you want this, just use char[] or Character[] and use Arrays.fill(arr,'x'). Then convert back it to appropriate String Object of use.

char str1[] = new char[N+1]; //I think java char[] does not have to null terminated,as it is just array and not like char[] in c++

StringBuffer str = new StringBuffer(new String(str1) | str1);

//If you want to do manupilation, better start for loop

*/

#question can we define collection comperator like this for primitive data type??
    // min PQ
        PriorityQueue<int[]> pq = new PriorityQueue<int[]>(new Comparator<int[]>() {  
            public int compare(int[] a, int[] b) {
                return Integer.compare(a[0]+a[1],b[0]+b[1]);
            }
        });



# memoization & initilizatin of 2d array
int mem[][] = new int[N][N];
initlizlize to -1 via two for loops.

java 0 cannot be casted back to true|false.
so boolean mem[][] need to be checked further. (or use int array)

int ans = mem[i][j] & then using answer below cannot be done in java. (as in c++ we use int &ans = mem[i][j])
As in java primitive type are passed as copy ,but object as reference.